name: Maintenance

on:
  schedule:
    # Run every Sunday at 6 AM UTC
    - cron: '0 6 * * 0'
  workflow_dispatch: # Allow manual trigger

jobs:
  health-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Checkout agbcc
      uses: actions/checkout@v4
      with:
        path: 'agbcc'
        repository: 'pret/agbcc'
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-arm-none-eabi binutils-arm-none-eabi libpng-dev
        
    - name: Install agbcc
      run: |
        ./build.sh
        ./install.sh ../
      working-directory: ./agbcc
        
    - name: Build tools health check
      run: |
        echo "Checking if tools build successfully..."
        make tools
        
        # Check if all tools were built
        TOOLS_DIR="tools"
        EXPECTED_TOOLS="aif2pcm bin2c gbafix gbagfx jsonproc mapjson mid2agb preproc ramscrgen rsfont scaninc"
        
        for tool in $EXPECTED_TOOLS; do
          if [ ! -f "$TOOLS_DIR/$tool/$tool" ] && [ ! -f "$TOOLS_DIR/$tool/$tool.exe" ]; then
            echo "❌ Tool $tool was not built successfully"
            exit 1
          else
            echo "✅ Tool $tool built successfully"
          fi
        done
        
    - name: Quick build test
      run: |
        echo "Testing quick build..."
        timeout 300 make firered -j$(nproc) || {
          echo "❌ Build took too long or failed"
          exit 1
        }
        echo "✅ Quick build successful"
        
    - name: Repository health check
      run: |
        echo "Checking repository health..."
        
        # Check for large files
        find . -type f -size +10M ! -path "./.git/*" ! -name "*.gba" | while read file; do
          echo "⚠️ Large file detected: $file ($(du -h "$file" | cut -f1))"
        done
        
        # Check total repository size
        REPO_SIZE=$(du -sh . | cut -f1)
        echo "Repository size: $REPO_SIZE"
        
        # Check for uncommitted changes (shouldn't happen in CI, but good to verify)
        if ! git diff --quiet; then
          echo "⚠️ Uncommitted changes detected"
          git status --porcelain
        fi
        
        # Check for untracked files that might be build artifacts
        UNTRACKED=$(git ls-files --others --exclude-standard)
        if [ -n "$UNTRACKED" ]; then
          echo "ℹ️ Untracked files found (this is normal in CI):"
          echo "$UNTRACKED"
        fi
        
    - name: Check for updates
      run: |
        echo "Checking for potential updates..."
        
        # Check if there are upstream changes in pret/pokefirered
        # (This is just informational since this is a personal fork)
        echo "Note: Consider checking https://github.com/pret/pokefirered for updates"
        echo "that might be relevant to your ROM hack project."
        
        # Check GitHub Actions versions
        echo "Current workflow file versions:"
        grep -r "uses:.*@" .github/workflows/ || echo "No external actions found"

  cleanup:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Delete old workflow runs
      uses: actions/github-script@v6
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          
          // Get workflow runs older than 30 days
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          try {
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner,
              repo
            });
            
            for (const workflow of workflows.data.workflows) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: workflow.id,
                status: 'completed',
                per_page: 100
              });
              
              for (const run of runs.data.workflow_runs) {
                const runDate = new Date(run.created_at);
                if (runDate < thirtyDaysAgo) {
                  console.log(`Deleting old run: ${run.id} from ${run.created_at}`);
                  await github.rest.actions.deleteWorkflowRun({
                    owner,
                    repo,
                    run_id: run.id
                  });
                }
              }
            }
          } catch (error) {
            console.log(`Error cleaning up workflows: ${error.message}`);
          }
